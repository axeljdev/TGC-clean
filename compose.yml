services:
  front:
    build: ./frontend
    # image: mongo
    ports:
      - 5173:5173 # host_port:container_port
    volumes:
      - ./frontend/index.html:/app/index.html
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
    networks:
      - app-network
  back:
    build: ./backend
    ports:
      - 5500:5500 # host_port:container_port
    # environment:
    # - CHOKIDAR_USEPOLLING=true
    env_file:
      - database.env
      - backend.env
    volumes:
      - ./backend/src:/app/src # warning between window & linux, should use polling instead of file notification
      # - ./backend/database:/app/database # not needed anymore, was useful for SQLite
    networks:
      - app-network
  db:
    image: postgres
    ports:
      - 5432:5432 # host_port:container_port
    env_file:
      - database.env
    volumes:
      # enough for local dev
      # - /var/lib/postgresql/data # creating anonymous volume
      - dbdata:/var/lib/postgresql/data
    networks:
      - app-network

# With docker, 4 ways to deal with data:
# - no volume → data are stored in the container (not durable)
# - ./somesfolderofmycomputer:./somefolderinthecontainer → mount the host filesystem in the container filesystem
# - /somefolderinthecontainer → mount an anonymous volume managed by docker in the container filesystem
# - namedvolume:/somefolderinthecontainer → mount a named volume created with Docker but manually managed in the container filesystem

volumes:
  dbdata:
    driver: local

networks:
  app-network:
    driver: bridge
